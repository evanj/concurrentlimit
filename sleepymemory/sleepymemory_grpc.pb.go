// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: sleepymemory/sleepymemory.proto

package sleepymemory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SleeperClient is the client API for Sleeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SleeperClient interface {
	Sleep(ctx context.Context, in *SleepRequest, opts ...grpc.CallOption) (*SleepResponse, error)
}

type sleeperClient struct {
	cc grpc.ClientConnInterface
}

func NewSleeperClient(cc grpc.ClientConnInterface) SleeperClient {
	return &sleeperClient{cc}
}

func (c *sleeperClient) Sleep(ctx context.Context, in *SleepRequest, opts ...grpc.CallOption) (*SleepResponse, error) {
	out := new(SleepResponse)
	err := c.cc.Invoke(ctx, "/sleepymemory.Sleeper/Sleep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SleeperServer is the server API for Sleeper service.
// All implementations must embed UnimplementedSleeperServer
// for forward compatibility
type SleeperServer interface {
	Sleep(context.Context, *SleepRequest) (*SleepResponse, error)
	mustEmbedUnimplementedSleeperServer()
}

// UnimplementedSleeperServer must be embedded to have forward compatible implementations.
type UnimplementedSleeperServer struct {
}

func (UnimplementedSleeperServer) Sleep(context.Context, *SleepRequest) (*SleepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sleep not implemented")
}
func (UnimplementedSleeperServer) mustEmbedUnimplementedSleeperServer() {}

// UnsafeSleeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SleeperServer will
// result in compilation errors.
type UnsafeSleeperServer interface {
	mustEmbedUnimplementedSleeperServer()
}

func RegisterSleeperServer(s grpc.ServiceRegistrar, srv SleeperServer) {
	s.RegisterService(&Sleeper_ServiceDesc, srv)
}

func _Sleeper_Sleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SleepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SleeperServer).Sleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sleepymemory.Sleeper/Sleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SleeperServer).Sleep(ctx, req.(*SleepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sleeper_ServiceDesc is the grpc.ServiceDesc for Sleeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sleeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sleepymemory.Sleeper",
	HandlerType: (*SleeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sleep",
			Handler:    _Sleeper_Sleep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sleepymemory/sleepymemory.proto",
}
